//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApiNET.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IOutlookService")]
    public interface IOutlookService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutlookService/Connect", ReplyAction="http://tempuri.org/IOutlookService/ConnectResponse")]
        void Connect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutlookService/Connect", ReplyAction="http://tempuri.org/IOutlookService/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IOutlookService/Disconnect")]
        void Disconnect();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IOutlookService/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IOutlookService/Callback")]
        void Callback();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IOutlookService/Callback")]
        System.Threading.Tasks.Task CallbackAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutlookService/GetAppointments", ReplyAction="http://tempuri.org/IOutlookService/GetAppointmentsResponse")]
        BLL.EntitesDTO.AppointmentDTO[] GetAppointments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutlookService/GetAppointments", ReplyAction="http://tempuri.org/IOutlookService/GetAppointmentsResponse")]
        System.Threading.Tasks.Task<BLL.EntitesDTO.AppointmentDTO[]> GetAppointmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutlookService/GetAppointmentsWithSql", ReplyAction="http://tempuri.org/IOutlookService/GetAppointmentsWithSqlResponse")]
        BLL.EntitesDTO.AppointmentDTO[] GetAppointmentsWithSql(int id, int itemsToSkip, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutlookService/GetAppointmentsWithSql", ReplyAction="http://tempuri.org/IOutlookService/GetAppointmentsWithSqlResponse")]
        System.Threading.Tasks.Task<BLL.EntitesDTO.AppointmentDTO[]> GetAppointmentsWithSqlAsync(int id, int itemsToSkip, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutlookService/GetAppointmentById", ReplyAction="http://tempuri.org/IOutlookService/GetAppointmentByIdResponse")]
        BLL.EntitesDTO.AppointmentDTO GetAppointmentById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutlookService/GetAppointmentById", ReplyAction="http://tempuri.org/IOutlookService/GetAppointmentByIdResponse")]
        System.Threading.Tasks.Task<BLL.EntitesDTO.AppointmentDTO> GetAppointmentByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutlookService/UpdateAppointment", ReplyAction="http://tempuri.org/IOutlookService/UpdateAppointmentResponse")]
        BLL.EntitesDTO.AppointmentDTO UpdateAppointment(BLL.EntitesDTO.AppointmentDTO appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutlookService/UpdateAppointment", ReplyAction="http://tempuri.org/IOutlookService/UpdateAppointmentResponse")]
        System.Threading.Tasks.Task<BLL.EntitesDTO.AppointmentDTO> UpdateAppointmentAsync(BLL.EntitesDTO.AppointmentDTO appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutlookService/RemoveAppointmentById", ReplyAction="http://tempuri.org/IOutlookService/RemoveAppointmentByIdResponse")]
        BLL.EntitesDTO.AppointmentDTO RemoveAppointmentById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutlookService/RemoveAppointmentById", ReplyAction="http://tempuri.org/IOutlookService/RemoveAppointmentByIdResponse")]
        System.Threading.Tasks.Task<BLL.EntitesDTO.AppointmentDTO> RemoveAppointmentByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutlookService/AddAppointment", ReplyAction="http://tempuri.org/IOutlookService/AddAppointmentResponse")]
        BLL.EntitesDTO.AppointmentDTO AddAppointment(BLL.EntitesDTO.AppointmentDTO appointment, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutlookService/AddAppointment", ReplyAction="http://tempuri.org/IOutlookService/AddAppointmentResponse")]
        System.Threading.Tasks.Task<BLL.EntitesDTO.AppointmentDTO> AddAppointmentAsync(BLL.EntitesDTO.AppointmentDTO appointment, int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOutlookServiceChannel : WebApiNET.ServiceReference.IOutlookService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OutlookServiceClient : System.ServiceModel.ClientBase<WebApiNET.ServiceReference.IOutlookService>, WebApiNET.ServiceReference.IOutlookService {
        
        public OutlookServiceClient() {
        }
        
        public OutlookServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OutlookServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OutlookServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OutlookServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Connect() {
            base.Channel.Connect();
        }
        
        public System.Threading.Tasks.Task ConnectAsync() {
            return base.Channel.ConnectAsync();
        }
        
        public void Disconnect() {
            base.Channel.Disconnect();
        }
        
        public System.Threading.Tasks.Task DisconnectAsync() {
            return base.Channel.DisconnectAsync();
        }
        
        public void Callback() {
            base.Channel.Callback();
        }
        
        public System.Threading.Tasks.Task CallbackAsync() {
            return base.Channel.CallbackAsync();
        }
        
        public BLL.EntitesDTO.AppointmentDTO[] GetAppointments() {
            return base.Channel.GetAppointments();
        }
        
        public System.Threading.Tasks.Task<BLL.EntitesDTO.AppointmentDTO[]> GetAppointmentsAsync() {
            return base.Channel.GetAppointmentsAsync();
        }
        
        public BLL.EntitesDTO.AppointmentDTO[] GetAppointmentsWithSql(int id, int itemsToSkip, int pageSize) {
            return base.Channel.GetAppointmentsWithSql(id, itemsToSkip, pageSize);
        }
        
        public System.Threading.Tasks.Task<BLL.EntitesDTO.AppointmentDTO[]> GetAppointmentsWithSqlAsync(int id, int itemsToSkip, int pageSize) {
            return base.Channel.GetAppointmentsWithSqlAsync(id, itemsToSkip, pageSize);
        }
        
        public BLL.EntitesDTO.AppointmentDTO GetAppointmentById(int id) {
            return base.Channel.GetAppointmentById(id);
        }
        
        public System.Threading.Tasks.Task<BLL.EntitesDTO.AppointmentDTO> GetAppointmentByIdAsync(int id) {
            return base.Channel.GetAppointmentByIdAsync(id);
        }
        
        public BLL.EntitesDTO.AppointmentDTO UpdateAppointment(BLL.EntitesDTO.AppointmentDTO appointment) {
            return base.Channel.UpdateAppointment(appointment);
        }
        
        public System.Threading.Tasks.Task<BLL.EntitesDTO.AppointmentDTO> UpdateAppointmentAsync(BLL.EntitesDTO.AppointmentDTO appointment) {
            return base.Channel.UpdateAppointmentAsync(appointment);
        }
        
        public BLL.EntitesDTO.AppointmentDTO RemoveAppointmentById(int id) {
            return base.Channel.RemoveAppointmentById(id);
        }
        
        public System.Threading.Tasks.Task<BLL.EntitesDTO.AppointmentDTO> RemoveAppointmentByIdAsync(int id) {
            return base.Channel.RemoveAppointmentByIdAsync(id);
        }
        
        public BLL.EntitesDTO.AppointmentDTO AddAppointment(BLL.EntitesDTO.AppointmentDTO appointment, int id) {
            return base.Channel.AddAppointment(appointment, id);
        }
        
        public System.Threading.Tasks.Task<BLL.EntitesDTO.AppointmentDTO> AddAppointmentAsync(BLL.EntitesDTO.AppointmentDTO appointment, int id) {
            return base.Channel.AddAppointmentAsync(appointment, id);
        }
    }
}
